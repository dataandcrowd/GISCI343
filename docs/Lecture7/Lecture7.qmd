---
title: "Object Oriented Programming for GIS Dummies"
# subtitle: ": Examples with Census NZ"
date: 09/10/2024
date-format: long
author:
  - name: Hyesop Shin
    orcid: 0000-0003-2637-7933
    email: hyesop.shin@auckland.ac.nz
    affiliations:
      - name: University of Auckland
        address: 23 Symonds Street
        city: Auckland
        postal-code: 1010
format: 
  revealjs:
      logo: Figs/uoa-logo.png
      css: logo.css
      slide-number: true
      show-slide-number: print
editor: source
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.7em;
      }
      </style>
---


## Today's Lecture (1hr)
* Why do we need Object Oriented Programming
* What are the benefits of using OOP?
* Some examples


## Before we cover OOP...
* Let's go back to how we code.

```python
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt

read file
assign variables
overwrite variables
analyse your work
plot some outputs
write some text
submit

```

## When your project gets bigger

![](Figs/spaghetti.jpg)

You will likely end up in a complex code you can never explain to others (aka. Spaghetti code)


## What is Object Oriented Programming?
::: {.incremental}

* Object-oriented programming (OOP) is a programming paradigm based on the concept of objects ([Wiki](https://en.wikipedia.org/wiki/Object-oriented_programming))
* OOP is the most popular programming paradigm used for software development 
* OOP is taught as the standard way to code for most of a programmer’s educational career.
* What we have covered in this course so far is procedural programming

:::

## Class 

::: {style="font-size: 70%;"}
* A class is a user-defined data type. 
* A `class` makes it easier to represent real-world objects in computer programming by minimising unnecessary, repeated small pieces of code.
* It consists of data members and member functions, which can be accessed and used by creating an instance of that class.
:::

![](https://journey.prog-8.com/static/5748589d653e7fa14ddc50b5181dcfa9/illustration.svg){fig-align="center"}


## Object
* An element (or instance) of a class
* Attributes: What an object is/has
    - name, age, height
* Methods: what an object can co
    - east, sleep, play

![](https://cdn.ttgtmedia.com/rms/onlineimages/whatis-object_oriented_programming_half_column_mobile.png){fig-align="center"}



## Examples
* In an empty `.py` file, you can write:

```python
class Car:
    pass

```

* If the file is small, you can keep it in the main script
* But if the file gets bigger, you might want to consider creating a separate file.

```python
# in your main file
from cars import Car

```

## Creating a class and an object
Let's create your first OOP!

```python
class Car: 
    def __init__(self):   # self is an instance (i.e. building a house) 
                          # that doesn't appear in the object
    def # What to do
    
    def # What to do

```

<!--

### Stage 1: 
class Car:
        make = None
        model = None
        year = None
        colour = None

    def drive(self):
        print("This car is driving")

    def stop(self):
        print("This car is stopped")
RUN

### Stage 2: 
class Car:

  def __init__(self, make, model, year, colour): instance/constructor
      self.make = make
      self.model = model
      self.year = year
      self.colour = colour

    def drive(self):
        print("This car is driving")

    def stop(self):
        print("This car is stopped")
RUN

car_1 = Car()
car_1 = Car("Corolla", "Toyota", 2024, "Pearl White")

### Stage 3:
class Car:

    def __init__(self,make,model,year,colour):
        self.make = make
        self.model = model
        self.year = year
        self.colour = colour

    def drive(self):
        print("This "+self.model+" is driving")

    def stop(self):
        print("This "+self.model+" is stopped")
-->




## Four pillars in OOP

![](https://miro.medium.com/v2/resize:fit:1400/1*okWMvihm_bOETOFjHJ_NJw.png)


## Inheritance
* To create an object that inherits the methods and properties of another object
* A parent class and a child class
* Use `super()` to inherit parent class

![](Figs/inherit.png){fig-align="center"}


## Polymorphism - process of using for more than one purpose
* Poly = many / morph = forms
* You can have one function or object that can be used in different ways


![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*N7cKjbtQzpU3jCx_00OYRg.png){fig-align="center"}


## Polymorphism
* Example: `+` operator

![](Figs/polymorphism.png){fig-align="center"}

## Encapsulation
* Encapsulation is the process of making data private by wrapping data and its methods in a ‘capsule’ or unit
* It can not be accessed or modified outside of that unit
* In Python, we can make variables private by prefixing the variable name with a double underscore `__`

![](Figs/encapsulation.png){fig-align="center"}


## Why is it helpful to make some attributes private in a class?
::: {style="font-size: 80%;"}
* Because it allows you to control how those attributes are accessed and modified. 
* You can ensure that it's only changed in specific, intended ways. 
* Prevents accidental or harmful changes to the data, which can lead to bugs or unexpected behaviour in your programme.
:::


## Real-World Example of Encapsulation:
::: {style="font-size: 50%;"}
* Imagine you’re building software for a coffee shop. You might have a class that represents a coffee machine. 
* The coffee machine has many internal components, like water levels, temperature settings, and a coffee bean grinder.
* `water_level`, `temp`, `set_grind_for_espresso()`
:::

![](https://www.tasteofhome.com/wp-content/uploads/2020/02/Types-of-Coffee-Drinks_1200X1200.jpg){fig-align="center"}

## Encapsulation
![](Figs/encapsulation2.png){fig-align="center"}

::: {style="font-size: 50%;"}
* Private Attribute: The dog's name (`__name`) is private, meaning it can't be accessed directly from outside the class.
* Public Methods: The `get_name` and `set_name` methods allow you to safely access and change the dog's name.
* Controlled Access: You can only change or get the dog's name using the methods provided (`set_name` and `get_name`), which keeps the data safe and consistent.
:::


## Abstraction
::: {style="font-size: 70%;"}
* Abstraction is about keeping the process simple by hiding unnecessary details from the user
* e.g. Car
* Abstraction is about keeping the internal mechanics of the code hidden from the user. 
* This reduces the complexity of the code, and ensures that we only concentrate on what is important.
:::

![](Figs/abstraction.png){fig-align="center"}

<!-- ## Abstraction -->
<!-- * **Key Takeaway**: Abstraction enforces a contract. Every car must have a model, but the specifics are determined by each subclass. -->
<!-- * **Abstract Class (Car)**: Sets a standard that every car subclass must have a car_model method. -->
<!-- * **Purpose of Abstract Class**: Ensures the focus is on WHAT should be implemented, not HOW. -->
<!-- * **Subclasses (Tesla and BMW)**: Implement the car_model method, defining HOW it should work for each specific car. -->


## Summary

![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*pKlZddECirQAm2bZiOrU1A.png)

<!-- https://medium.com/@kalanamalshan98/oop-concepts-mastering-basics-with-real-life-examples-for-easy-understanding-part-1-da5b8fc21036 -->

## <br> Thanks! <br> Q & A {style="text-align: center;"}
