---
title: "Python Data Bootcamp - Geopandas 1"
subtitle: ": An Introduction to Geospatial Analysis with Python"
date: 03/21/2025
date-format: long
author:
  - name: Hyesop Shin
    orcid: 0000-0003-2637-7933
    email: hyesop.shin@auckland.ac.nz
    affiliations:
      - name: University of Auckland
        address: 23 Symonds Street
        city: Auckland
        postal-code: 1010
format: 
  revealjs:
      logo: Figs/uoa-logo.png
      css: logo.css
      slide-number: true
      show-slide-number: print
editor: source
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.7em;
      }
      </style>
---


## Recap of Previous Lecture

- Descriptive Statistics
- Aggregation using `groupby`
- Merging dataframes
- Data Vis


## Today's Lecture
* Little bit of `pandas`
* Lots of GIS functions exist
* We are not going to cover everything such as:
   - Intersect
   - Buffer
   - Clip


## Melt and Cast {.smaller}

![](https://hausetutorials.netlify.app/posts/2020-05-14-reshaping-data-in-python-pandas/pic5.png){fig-align=center}

* Pandas `melt()` function is used to change the DataFrame format from wide to long.
* It’s used to create a specific format of the DataFrame object where one or more columns work as identifiers.
* All the remaining columns are treated as values and unpivoted to the row axis and only two columns – variable and value.
* We can use `pivot()` function to unmelt the output DataFrame back to the original data frame.


## Melt and Cast 

```python
df = pd.DataFrame({
    'City': ['Auckland', 'Wellington', 'Christchurch'],
    'Jan_Temp': [25, 22, 20],
    'Feb_Temp': [24, 21, 19],
    'Mar_Temp': [23, 20, 18]
})

print("Original DataFrame:")
print(df)

# Using melt to reshape the DataFrame
df_melted = pd.melt(df, id_vars=['City'], var_name='Month', value_name='Temperature')

print("\nMelted DataFrame:")
print(df_melted)
```

## Data Vis

```python
import seaborn as sns
import matplotlib.pyplot as plt

# Set a clean style
sns.set(style="whitegrid")

# Plot
plt.figure(figsize=(10, 6))
sns.lineplot(data=df_melted, x='Month', y='Temperature', hue='City', marker='o')

# Add titles and labels
plt.title('Monthly Temperatures Across Cities', fontsize=16)
plt.xlabel('Month')
plt.ylabel('Temperature (°C)')
plt.xticks(rotation=45)
plt.legend(title='City')
plt.tight_layout()

# Show plot
plt.show()
```

## Two fundamental geographic data models



:::: {.columns}

::: {.column width="50%"}

![](Figs/howwemap.png)

:::


::: {.column width="50%"}
Vector = precise & structured.
Raster = continuous & consistent
:::

::::

## Vector vs Raster Data Models {.smaller}

| **Aspect**         | **Vector Model**                                      | **Raster Model**                                         |
|--------------------|--------------------------------------------------------|-----------------------------------------------------------|
| **Data Type**      | Points, Lines, Polygons                               | Grid of uniform cells (pixels)                           |
| **Boundaries**     | Discrete, well-defined                                | Aggregated, based on resolution                          |
| **Precision**      | High precision (exact shapes & locations)             | Lower precision, depends on cell size                    |
| **Scalability**    | Scales with complexity                                | Consistent and scalable over space                       |
| **Common Uses**    | Parcels, roads, boundaries                            | Satellite imagery, aerial photos, land cover             |
| **Applications**   | Accurate mapping, cadastre, infrastructure            | Background layers, remote sensing, environmental models  |


## Which data to use

* Vector datasets and methods dominate the social sciences because human settlements and processes (e.g., transport infrastructure) tend to have discrete borders
* Raster datasets and methods dominate many environmental sciences because of the reliance on remote sensing data

## Python Tools for Vector and Raster Data

### 🟢 Vector Data

| Package      | Level     | Description                                                                 |
|--------------|-----------|-----------------------------------------------------------------------------|
| `shapely`    | Low-level | Handles individual geometry objects (points, lines, polygons)               |
| `geopandas`  | High-level| Works with GeoSeries & GeoDataFrames (vector layers); built on shapely      |

<!-- ➡️ **GeoPandas** is the core of the vector data ecosystem in Python. -->

---

### 🟡 Raster Data

| Package       | Focus      | Description                                                                 |
|---------------|------------|-----------------------------------------------------------------------------|
| `rasterio`    | Simple rasters | Uses `numpy` arrays + metadata dictionary (CRS, transform, etc.)            |
| `xarray`      | Complex rasters | Uses `xarray.Dataset` and `DataArray`; ideal for NetCDF & multi-band rasters |

<!-- ➡️ This course focuses on **rasterio** for raster processing. -->


## Geospatial data in Python 

* A couple of terminology notes
    _ A feature refers to both the geometry and attributes of specific piece of vector data
    - A feature collection is a list, or collection, of features
    
* Common formats for vector datasets
    - A shapefile
    * Mandatory files:
    * shp: the file containing the geometries
    * .shx: the file that indexes the geometry
    * .dbf: tabular data format storing the attributes for each geometry
    * And many optional files for documentation, projection information, etc.

* geopackage (gpkg), gdb, tif, img, parquet


## Geospatial data and GeoPandas

![](https://miro.medium.com/v2/resize:fit:1238/1*x9gF-ZVR4JMAv3cTH6LtfA.png){fig-align=center}

* Geospatial data are data with location information
* The geometry variable indicates where the *data* is located






## Reading and Writing Spatial Data

### Reading Data
- Use `gpd.read_file()` to read various spatial data formats (e.g., Shapefiles, GeoJSON)

```python
  import geopandas as gpd
  nzpop = gpd.read_file('path_to_file.shp')
```

---

### Writing Data

Use `gpd.to_file()` to write GeoDataFrames to different formats

```python
nzpop.to_file('path_to_save_file.shp')
```

---

### Coordinate Reference Systems (CRS)
- Importance of CRS in spatial data
- Using `.crs` to check CRS
- Setting CRS during data read/write operations
- `print(nzpop.crs)`
- Transform to a different CRS: `gdf = gdf.to_crs(3857)`


## Mapping and plotting tools

GeoPandas provides a high-level interface to the `matplotlib` library for making maps. Mapping shapes is as easy as using the `plot()` method on a `GeoSeries` or `GeoDataFrame.`

```python
nzpop.plot()

nzpop.boundary.plot()

```

![](Figs/boundary.png){fig-align="center"}



---

### Choropleth maps
::: {style="font-size: 80%;"}
- Choropleth maps use the Counts and amounts (Colour) smart mapping symbol type to show data as shaded points, lines, or areas. (source: ArcGIS)
- Choropleth maps help answer questions about data, such as: How do rates or percentages compare by geographic feature?
- Unemployment and Crime
:::

![](Figs/unemployment.png){fig-align="center"}

---

### With our own data

```python
nzpop.plot(column="VAR_1_23")
```

![](Figs/choroplethmap_colour.png){fig-align="center"}


---

### With our own data 2

```python
nzpop.plot(column='VAR_1_23', legend=True,
           legend_kwds={'label': "Population in 2023",
                        'orientation': "vertical"},
           cmap='OrRd')
plt.title('Choropleth Map of Population in 2023')
plt.show()
```

---

### With our own data 3: Classification

::: {style="font-size: 70%;"}
- The scheme option can be set to any scheme provided by mapclassify 
- e.g. `box_plot`, `equal_interval`, `fisher_jenks`, `fisher_jenks_sampled`, `headtail_breaks`, `jenks_caspall`, `jenks_caspall_forced`, `jenks_caspall_sampled`, `max_p_classifier`, `maximum_breaks`, `natural_breaks`, `quantiles`, `percentiles`, `std_mean` or `user_defined`
- https://pysal.org/mapclassify/

:::


```python
import mapclassify as mc

nzpop.plot(column="VAR_1_23", cmap='OrRd', scheme='quantiles')

```

---

### With our own data 4

```python
classifier = mc.NaturalBreaks(y=nzpop["VAR_1_23"], k=5)  # k is the number of classes

fig, ax = plt.subplots(1, 1, figsize=(10, 6))
nzpop.plot(column="VAR_1_23", cmap='OrRd', linewidth=0.8, ax=ax, edgecolor='0.8', 
           scheme='NaturalBreaks', classification_kwds={'k': 5}, legend=True)

plt.title('Choropleth Map of Population with Natural Breaks')
plt.show()
```


## Pandas plots
::: {style="font-size: 70%;"}

Plotting methods also allow for different plot styles from pandas along with the default `geo` plot. These methods can be accessed using the `kind` keyword argument in `plot()`, and include:

- `geo` for mapping
- `line` for line plots
- `bar` or `barh` for bar plots
- `hist` for histogram
- `box` for boxplot
- `kde` or `density` for density plots
- `area` for area plots
- `scatter` for scatter plots
- `hexbin` for hexagonal bin plots
- `pie` for pie plots
:::



--- 

### Scatter plot and Histogram

```python
nzpop.plot(kind="scatter", x="VAR_1_15", y="VAR_1_23")

nzpop.plot[["VAR_1_15", "VAR_1_23", "geometry"]].plot.hist(alpha=.4)
```

<br>

::: {style="font-size: 70%;"}

- If you want to change the name of the variable, `nzpop.rename(columns={'VAR_1_15': 'NewName_15', 'VAR_1_23': 'NewName_23'}, inplace=True)`

:::


## Population Distribution and Demographics: Census NZ 2023 vs 2018

::: {style="font-size: 70%;"}

```python
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# First variable
nzpop.plot(column='VAR_1_15', ax=ax1, legend=True, cmap='OrRd')
ax1.set_title('Population 2018')
cbar1 = ax1.get_figure().get_axes()[2]  # Get the first colorbar axis
cbar1.ticklabel_format(style='plain') # Access the colorbars (legends) and apply ticklabel_format

# Second variable
nzpop.plot(column='VAR_1_23', ax=ax2, legend=True, cmap='YlGn')
ax2.set_title('Population 2023')
cbar2 = ax2.get_figure().get_axes()[3]  # Get the second colorbar axis
cbar2.ticklabel_format(style='plain')

# Adjust layout to prevent overlap
plt.tight_layout()
# Show the plot
plt.show()
```
:::

---

### Output

![](Figs/pop1823.png)

- Can you now add the total population of 2013 next to these plots?


## Merging data

There are two ways to combine datasets in GeoPandas – <span style="color:blue;">attribute joins</span> and <span style="color:red;">spatial joins</span>.

```python
#pip install geodatasets
import geodatasets
```

---

### Attribute joins
- Attribute joins are accomplished using the `merge()` method. In general, it is recommended to use the `merge()` method called from the spatial dataset.
- With that said, the stand-alone `pandas.merge()` function will work if the GeoDataFrame is in the `left` argument

```python
chicago_shapes.head()
chicago_names.head()

chicago_shapes = chicago_shapes.merge(chicago_names, on='NID')
```

---

### Spatial joins

In a spatial join, two geometry objects are merged based on their spatial relationship to one another.
GeoPandas provides two spatial-join functions:

- GeoDataFrame.sjoin(): joins based on binary predicates (intersects, contains, etc.)
- GeoDataFrame.sjoin_nearest(): joins based on proximity, with the ability to set a maximum search radius.


```python
chicago.head()
groceries.head()

groceries_with_community = groceries.sjoin(chicago, how="inner", predicate='intersects')
```

## Thoughts

* What are the age distribution patterns across different regions in New Zealand?
* How has the ethnic diversity in New Zealand evolved over the past three censuses, and what are the notable trends in Auckland?

![](Figs/further.jpg)


## Summary
* To navigate complex datasets effectively, it's crucial to structure your code in a way that enhances readability and maintainability
* Python offers a rich ecosystem of libraries specifically designed for GIS and spatial analysis. We explored some key packages such as GeoPandas for spatial data frames
* The actual programming:
    - Pandas: Indexing, Filtering, Grouping, Join between dataframes
    - Geopandas: Hands-on experience in GIS using codes



## <br> Thanks! <br> Q & A {style="text-align: center;"}
